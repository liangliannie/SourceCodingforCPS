file = '''Episode:  0 Last t:  149 Bits used:  491
Episode:  1 Last t:  149 Bits used:  507
Episode:  2 Last t:  149 Bits used:  486
Episode:  3 Last t:  149 Bits used:  544
Episode:  4 Last t:  149 Bits used:  552
Episode:  5 Last t:  149 Bits used:  520
Episode:  6 Last t:  149 Bits used:  556
Episode:  7 Last t:  149 Bits used:  527
Episode:  8 Last t:  149 Bits used:  497
Episode:  9 Last t:  149 Bits used:  506
Episode:  10 Last t:  149 Bits used:  502
Episode:  11 Last t:  149 Bits used:  495
Episode:  12 Last t:  149 Bits used:  520
Episode:  13 Last t:  149 Bits used:  499
Episode:  14 Last t:  149 Bits used:  597
Episode:  15 Last t:  149 Bits used:  506
Episode:  16 Last t:  149 Bits used:  560
Episode:  17 Last t:  149 Bits used:  495
Episode:  18 Last t:  149 Bits used:  523
Episode:  19 Last t:  149 Bits used:  538'''

file = file.split('\n')
bits = []
for line in file:
    bits.append(int(line[-3:]))

import matplotlib.pylab as plt
import numpy as np
import pickle
import seaborn as sns

fig = plt.figure()
ax1 = plt.subplot2grid((1,1), (0,0), rowspan=1, colspan=1)
# ax1.plot(np.arange(len(bits)), np.array(bits)/149)
sns.distplot(np.array(bits)/149.0, bins=10)
# ax1.plot(np.arange(len(bits)), bits)
# ax1.fill_between(np.arange(len(bits)), bits, bits,
#                      where=(bits < np.mean(bits)),
#                      facecolor='r', edgecolor='r', alpha=0.5)
#
# ax1.fill_between(np.arange(len(bits)), bits, bits,
#                      where=(bits > np.mean(bits)),
#                      facecolor='g', edgecolor='g', alpha=0.5)
plt.ylabel('Distribution')
plt.xlabel('Average Bits per Episode')
# ax2v = ax1.twinx()
# # ax2v = plt.subplot2grid((2,1), (1,0), rowspan=1, colspan=1, sharex=ax1)
# ax2v.fill_between(np.arange(len(bits)), 0, np.ones(len(bits))*149, facecolor='#0079a3', alpha=0.4)
# ax2v.set_ylim(0, 700)

# duration = [37, 39, 67, 24, 25, 31, 24, 21, 70, 41, 53, 67, 115, 200, 113, 36, 57, 36, 41, 37, 39, 41, 42, 34, 54, 48, 102, 88, 62, 60, 68, 74, 43, 86, 92, 101, 158, 200, 161, 200, 111, 200, 200, 200, 200, 109, 200, 200, 200, 200, 200, 200, 182, 159, 200, 200, 181, 108, 55, 43, 53, 67, 30, 65, 77, 60, 85, 38, 73, 53, 43, 54, 62, 71, 54, 72, 71, 56, 128, 65, 156, 64, 64, 200, 200, 199, 200, 200, 200, 200, 116, 200, 200, 141, 154, 117, 147, 200, 136, 124, 147, 144, 54, 97, 105, 102, 66, 130, 111, 133, 133, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 124, 200, 200, 52, 200, 32, 200, 183, 156, 200, 200, 200, 200, 200, 200, 200, 106, 194, 181, 200, 141, 28, 200, 192, 200, 200, 77, 200, 94, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 171, 200, 164, 200, 200, 200, 191, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 165, 150, 200, 147, 200, 200, 128, 155, 131, 200, 148, 128, 124, 138, 107, 200, 100, 86, 152, 128, 90, 129, 174, 138, 106, 158, 125, 138, 119, 92, 99, 124, 200, 200, 95, 133, 101, 88, 200, 120, 124, 138, 200, 87, 79, 169, 119, 183, 159, 157, 200, 152, 103, 166, 114, 200, 102, 119, 174, 200, 167, 200, 139, 167, 187, 184, 186, 200, 140, 183, 200, 138, 200, 157, 140, 143, 198, 114, 140, 169, 126, 158, 200, 112, 107, 140, 122, 145, 120, 168, 130, 113, 169, 124, 200, 200, 161, 163, 200, 132, 160, 142, 138, 200, 200, 168, 161, 160, 108, 99, 168, 95, 176, 158, 83, 107, 100, 166, 108, 89, 86, 79, 77, 98, 153, 111, 155, 152, 100, 105, 76, 94, 165, 112, 158, 98, 77, 92, 159, 158, 77, 88, 98, 119, 93, 85, 106, 102, 180, 119, 99, 88, 105, 109, 82, 99, 161, 109, 108, 81, 187, 200, 96, 109, 122, 106, 100, 112, 116, 107, 112, 130, 100, 120, 141, 115, 125, 133, 127, 114, 104, 104, 93, 104, 64, 113, 117, 116, 130, 143, 122, 144, 119, 141, 132, 153, 165, 150, 200, 175, 153, 168, 164, 157, 172, 187, 156, 161, 136, 161, 146, 136, 147, 151, 130, 135, 130, 136, 160, 152, 174, 174, 177, 175, 185, 196, 196, 178, 179, 172, 184, 183, 164, 167, 179, 172, 190, 173, 183, 162, 152, 145, 157, 160, 192, 167, 177, 163, 179, 196, 192, 188, 182, 183, 175, 160, 174, 174, 190, 193, 198, 198, 200, 196, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 193, 192, 182, 196, 170, 161, 134, 142, 140, 137, 134, 128, 133, 137, 133, 130, 149, 127, 121, 129, 127, 135, 134, 113, 124, 118, 112, 118, 107, 103, 42, 90, 49, 53, 71, 57, 69, 42, 74, 68, 79, 77, 83, 71, 87, 96, 99, 102, 112, 110, 134, 125, 150, 145, 149, 170, 198, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200]
# strategies = [13, 7, 1, 4, 7, 4, 9, 7, 6, 3, 7, 3, 9, 3, 6, 8, 10, 6, 5, 2, 6, 4, 6, 2, 5, 6, 8, 5, 6, 6, 6, 4, 4, 5, 5, 1, 6, 3, 6, 9, 3, 4, 5, 1, 3, 7, 6, 8, 2, 7, 2, 2, 4, 8, 7, 3, 1, 5, 6, 4, 6, 2, 2, 8, 1, 4, 6, 3, 7, 1, 5, 8, 7, 5, 8, 6, 5, 4, 2, 6, 2, 5, 7, 8, 5, 4, 1, 6, 3, 7, 5, 5, 5, 3, 4, 1, 1, 5, 8, 1, 5, 1, 1, 3, 7, 2, 5, 6, 3, 6, 8, 6, 2, 7, 7, 8, 6, 4, 3, 3, 5, 8, 3, 3, 7, 3, 3, 2, 6, 8, 5, 6, 5, 5, 6, 7, 6, 6, 6, 3, 7, 1, 1, 6, 3, 2, 5, 8, 1, 3, 3, 4, 2, 6, 5, 4, 1, 1, 3, 3, 5, 2, 8, 4, 1, 5, 6, 7, 8, 6, 7, 5, 6, 7, 3, 6, 1, 6, 2, 1, 7, 6, 6, 5, 6, 2, 4, 3, 3, 3, 3, 8, 4, 1, 2, 1, 2, 3, 10, 5, 8, 8, 2, 4, 6, 2, 6, 1, 5, 2, 5, 2, 7, 8, 8, 1, 1, 3, 6, 1, 2, 6, 3, 3, 4, 1, 5, 3, 3, 1, 5, 3, 5, 3, 7, 7, 5, 8, 5, 1, 4, 3, 2, 7, 6, 7, 2, 5, 4, 7, 1, 3, 8, 4, 4, 2, 2, 8, 1, 7, 5, 6, 4, 8, 4, 6, 8, 8, 12, 9, 4, 8, 9, 9, 3, 8, 8, 3, 8, 2, 7, 3, 8, 10, 3, 6, 9, 11, 6, 6, 6, 4, 7, 5, 7, 10, 10, 8, 11, 5, 8, 4, 4, 6, 6, 8, 8, 4, 4, 4, 5, 9, 10, 8, 10, 11, 9, 4, 5, 9, 6, 10, 8, 10, 4, 11, 8, 9, 10, 11, 5, 5, 8, 4, 6, 4, 7, 4, 8, 6, 4, 9, 4, 9, 10, 11, 8, 10, 10, 11, 11, 6, 10, 10, 11, 5, 6, 6, 5, 7, 8, 9, 5, 4, 10, 11, 9, 8, 9, 11, 7, 6, 11, 8, 10, 8, 9, 4, 11, 8, 10, 9, 4, 11, 8, 7, 6, 9, 7, 9, 8, 6, 4, 5, 4, 11, 6, 10, 7, 4, 4, 6, 8, 9, 11, 6, 10, 8, 9, 4, 10, 11, 8, 11, 7, 5, 5, 8, 9, 8, 8, 10, 7, 11, 10, 9, 9, 7, 7, 11, 5, 6, 4, 4, 11, 6, 7, 11, 9, 4, 8, 8, 9, 6, 7, 7, 6, 10, 10, 11, 9, 9, 6, 4, 11, 7, 6, 6, 4, 6, 4, 6, 10, 9, 7, 11, 11, 10, 10, 4, 7, 10, 8, 4, 8, 10, 4, 8, 8, 7, 4, 11, 9, 8, 9, 6, 11, 11, 6, 6, 8, 8, 8, 7, 8, 4, 11, 9, 8, 10, 8, 10, 5, 5, 8, 10, 4, 8, 4, 6, 7, 10, 11, 7, 6, 4, 10, 5, 10, 8, 7, 9, 6, 8, 11, 4, 10, 6, 11, 11, 5, 6, 5, 9, 6, 6, 5, 9, 8, 4, 8, 10, 6, 4, 4, 5, 5, 5, 9, 11, 8, 11, 8, 4, 6, 7, 6, 4, 10, 4, 5, 8, 5, 9, 5, 6, 9, 4, 9, 10, 8, 8, 7, 6, 7, 10, 9, 6, 4, 6, 5, 4, 6, 4, 9, 8, 4, 5, 8, 4, 11, 8, 5, 10, 5, 5, 4, 8, 4, 9, 7, 8, 10, 11, 8, 8, 6, 4, 11, 7, 8, 10, 6, 7, 8, 8, 10, 10, 11, 5, 10, 11, 6, 10, 8, 7, 10, 5, 7, 11, 6, 7, 6, 9, 5, 11, 7, 7, 5, 7, 8, 9, 5, 4, 8, 5, 4, 7, 10, 4, 4, 4, 8, 6, 5, 9, 6, 9, 4, 5, 9, 7, 6, 9, 7, 5, 7, 4, 4, 7, 10, 6, 7, 6, 5, 6, 10, 5, 8, 10, 8, 4, 7, 11, 9, 5, 9, 7, 6, 11, 8, 8, 11, 9, 8, 8, 6, 7, 6, 4, 11, 7, 8, 7, 5, 5, 9, 7, 9, 5, 8, 10, 8, 8, 11, 9, 10, 11, 10, 7, 4, 7, 10, 8, 6, 9, 8, 9, 5, 5, 10, 6, 8, 6, 6, 6, 6, 4, 6, 7, 7, 7, 8, 4, 11, 7, 4, 6, 10, 6, 9, 8, 9, 4, 4, 9, 9, 6, 9, 8, 11, 8, 8, 4, 6, 8, 9, 4, 7, 9, 5, 8, 6, 7, 8, 4, 5, 11, 5, 10, 6, 10, 5, 5, 8, 5, 11, 5, 7, 4, 5, 8, 4, 11, 4, 11, 8, 6, 5, 5, 6, 11, 4, 7, 11, 9, 8, 9, 7]
# plt.ylabel('Duration')
# ax1.legend()
#
# # with open('/Users/lli51/Google Drive/Papers/Distributed_source_coding/duration.pickle', 'rb') as f1:
# #     duration = pickle.load(f1)
# # with open('/Users/lli51/Google Drive/Papers/Distributed_source_coding/strategies.pickle', 'rb') as f2:
# #     strategies = pickle.load(f2)
#
# # print(duration)
# # print(strategies)
# gap = 20
# fig = plt.figure(2)
# ax1 = plt.subplot2grid((1,1), (0,0), rowspan=1, colspan=1)
# ax1.plot(np.arange(len(duration)), duration, 'b-')
# durationmean = []
# for i in range(0, len(duration)-gap):
#     durationmean.append(np.mean(duration[i: i+gap]))
# ax1.plot(np.arange(0, len(duration)-gap), durationmean, 'r.', label='Local Mean')
# ax1.set_xlabel('Episodes')
# ax1.set_ylabel('Duration')
# ax1.legend()
#
# fig = plt.figure(3)
# ax1 = plt.subplot2grid((1,1), (0,0), rowspan=1, colspan=1)
# ax1.plot(np.arange(len(strategies)), strategies, 'b-')
# strategiesmean = []
# for i in range(0, len(strategies)-gap):
#     strategiesmean.append(np.mean(strategies[i: i+gap]))
# ax1.plot(np.arange(0, len(strategies)-gap), strategiesmean, 'r.', label='Local Mean')
# ax1.set_xlabel('Episodes')
# ax1.set_ylabel('Total Bits of two sensors')
# ax1.legend()
plt.show()